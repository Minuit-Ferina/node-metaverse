// This file has been automatically generated by writeMessageClasses.js

import { UUID } from '../UUID';
import { MessageFlags } from '../../enums/MessageFlags';
import { MessageBase } from '../MessageBase';
import { Message } from '../../enums/Message';

export class GameControlInputMessage implements MessageBase
{
    name = 'GameControlInput';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyHigh;
    id = Message.GameControlInput;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
    };
    AxisData: {
        Index: number;
        Value: number;
    }[];
    ButtonData: {
        Data: Buffer;
    }[];

    getSize(): number
    {
        return ((3) * this.AxisData.length) + this.calculateVarVarSize(this.ButtonData, 'Data', 1) + 34;
    }

    calculateVarVarSize(block: { [key: string]: any }[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        for (const bl of block)
        {
            size += bl[paramName].length + extraPerVar;
        }
        return size;
    }

    // @ts-ignore
    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        let count = this.AxisData.length;
        buf.writeUInt8(this.AxisData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt8(this.AxisData[i]['Index'], pos++);
            buf.writeInt16LE(this.AxisData[i]['Value'], pos);
            pos += 2;
        }
        count = this.ButtonData.length;
        buf.writeUInt8(this.ButtonData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt8(this.ButtonData[i]['Data'].length, pos++);
            this.ButtonData[i]['Data'].copy(buf, pos);
            pos += this.ButtonData[i]['Data'].length;
        }
        return pos - startPos;
    }

    // @ts-ignore
    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        this.AgentData = newObjAgentData;
        if (pos >= buf.length)
        {
            return pos - startPos;
        }
        let count = buf.readUInt8(pos++);
        this.AxisData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjAxisData: {
                Index: number,
                Value: number
            } = {
                Index: 0,
                Value: 0
            };
            newObjAxisData['Index'] = buf.readUInt8(pos++);
            newObjAxisData['Value'] = buf.readInt16LE(pos);
            pos += 2;
            this.AxisData.push(newObjAxisData);
        }
        if (pos >= buf.length)
        {
            return pos - startPos;
        }
        count = buf.readUInt8(pos++);
        this.ButtonData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjButtonData: {
                Data: Buffer
            } = {
                Data: Buffer.allocUnsafe(0)
            };
            varLength = buf.readUInt8(pos++);
            newObjButtonData['Data'] = buf.slice(pos, pos + varLength);
            pos += varLength;
            this.ButtonData.push(newObjButtonData);
        }
        return pos - startPos;
    }
}

